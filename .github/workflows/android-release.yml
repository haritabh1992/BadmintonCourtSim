name: Android Release

on:
  push:
    branches: [ main ]  # Trigger on push to main branch
  workflow_dispatch:    # Allows manual trigger from GitHub Actions UI

jobs:
  build:
    name: Build Android Release Bundle
    runs-on: ubuntu-latest
    env:
      ANDROID_HOME: /usr/local/lib/android/sdk
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Add Node to PATH
        run: |
          echo "$(npm bin -g)" >> $GITHUB_PATH
          which node
          node --version

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Install Dependencies
        run: |
          npm install
          npm install -g react-native-cli

      - name: Generate Expo Assets
        run: |
          npx expo prebuild --platform android --clean

      - name: Create Keystore File
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d > android/app/badminton-release-key.keystore

      - name: Create Keystore Properties
        run: |
          echo "storeFile=badminton-release-key.keystore" > android/keystore.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/keystore.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/keystore.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/keystore.properties

      - name: Create Service Account Key File
        run: echo '${{ secrets.PLAY_STORE_CONFIG_JSON }}' > android/play-store-credentials.json

      # Build AAB using Gradle
      - name: Build Android Release Bundle
        run: |
          cd android
          ./gradlew clean :app:bundleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}

      # Upload the AAB as an artifact
      - name: Upload AAB Artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 3  # Keep the artifact for 3 days 